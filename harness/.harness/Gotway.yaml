pipeline:
    name: Gotway
    identifier: Gotway
    projectIdentifier: _mansong
    orgIdentifier: default
    description: "Simple HTTP API Gateway powered with in-redis cache "
    tags:
        go: ""
        golang: ""
        multi-arch: ""
    properties:
        ci:
            codebase:
                connectorRef: mansongGithub
                repoName: gotway
                build: <+input>
                sslVerify: false
                prCloneStrategy: SourceBranch
    stages:
        - stage:
              name: CI
              identifier: CI
              type: CI
              spec:
                  cloneCodebase: true
                  infrastructure:
                      type: KubernetesDirect
                      spec:
                          connectorRef: account.mansong_gke
                          namespace: harness-build
                  execution:
                      steps:
                          - step:
                                type: Run
                                name: Check DIND
                                identifier: Check_DIND
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: docker:dind
                                    command: |-
                                        while ! docker ps ;do
                                            echo "Docker not availble yet"
                                        done
                                            echo "Docker Service Ready"
                                    privileged: false
                          - step:
                                type: Run
                                name: Create Tag
                                identifier: Get_Tags
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: bitnami/git
                                    command: |+
                                        curl -sL https://git.io/autotag-install | sh --

                                        # fetch all tags and history:
                                        git fetch --tags --unshallow --prune

                                        if [ $(git rev-parse --abbrev-ref HEAD) != "master" ]; then
                                          # ensure a local 'main' branch exists at 'refs/heads/main'
                                          git branch --track master origin/master
                                        fi

                                        export VERSION=`./bin/autotag`

                                    privileged: false
                                    outputVariables:
                                        - name: VERSION
                                failureStrategies: []
                                when:
                                    stageStatus: Success
                          - parallel:
                                - step:
                                      type: Run
                                      name: DockerLint
                                      identifier: DockerLint
                                      spec:
                                          connectorRef: mansongdockerhub
                                          image: hadolint/hadolint:latest-alpine
                                          command: hadolint --ignore DL3018 --ignore DL3007 Dockerfile
                                          privileged: false
                                - step:
                                      type: Run
                                      name: Format
                                      identifier: Format
                                      spec:
                                          connectorRef: mansongdockerhub
                                          image: <+CI.variables.golangImage>
                                          command: gofmt -s -w .
                                          privileged: false
                                - step:
                                      type: Run
                                      name: Vet
                                      identifier: Vet
                                      spec:
                                          connectorRef: mansongdockerhub
                                          image: <+CI.variables.golangImage>
                                          command: |-
                                              apk add build-base
                                              go vet ./...
                                          privileged: false
                                          resources:
                                              limits:
                                                  memory: 1Gi
                                                  cpu: "1"
                          - step:
                                type: Run
                                name: Snyk Scan
                                identifier: snyk_scan
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: snyk/snyk:golang-1.16
                                    command: SNYK_TOKEN=<+secrets.getValue("snykapitoken")> snyk test
                                    privileged: true
                                    resources:
                                        limits:
                                            memory: 1Gi
                                            cpu: "1.0"
                          - step:
                                type: Run
                                name: Run Tests
                                identifier: Run_Tests
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: pricec/gotestsum
                                    command: gotestsum --junitfile results.xml --format standard-verbose -- -coverprofile=cover.out ./...
                                    privileged: false
                                    reports:
                                        type: JUnit
                                        spec:
                                            paths:
                                                - "*.xml"
                                    resources:
                                        limits:
                                            memory: 1Gi
                                            cpu: "1.0"
                          - step:
                                type: Run
                                name: Coverage Report
                                identifier: Coverage_Report
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: <+CI.variables.golangImage>
                                    command: |-
                                        go get github.com/axw/gocov/gocov
                                        go get github.com/AlekSi/gocov-xml

                                        gocov convert cover.out | gocov-xml > coverage.xml
                                    privileged: false
                                    reports:
                                        type: JUnit
                                        spec:
                                            paths:
                                                - coverage.xml
                          - step:
                                type: Run
                                name: Clean
                                identifier: Clean
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: <+CI.variables.golangImage>
                                    command: |-
                                        rm -rf ./bin
                                        go clean
                                    privileged: false
                          - step:
                                type: Run
                                name: Build
                                identifier: Build
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: <+CI.variables.golangImage>
                                    command: |-
                                        export VERSION=<+execution.steps.Get_Tags.output.outputVariables.VERSION>

                                        go build -tags netgo -a -v -ldflags "-X main.version=${VERSION} -s -w" -o ./bin/gotway ./cmd/gotway/*.go
                                        chmod +x ./bin/*
                                    privileged: false
                                    envVariables:
                                        CGO_ENABLED: "0"
                                        GO111MODULE: "on"
                          - step:
                                type: Run
                                name: Multi-Arch Docker Build and Push
                                identifier: MultiArch_Docker_Build_and_Push
                                spec:
                                    connectorRef: mansongdockerhub
                                    image: ncrmro/docker-buildx:20.10.6-0.5.1
                                    command: |-
                                        set -e

                                        docker version
                                        docker buildx version

                                        tag=<+execution.steps.Get_Tags.output.outputVariables.VERSION>

                                        name="gotway"
                                        image="mansong/$name"
                                        platform="linux/amd64,linux/arm64,linux/arm"

                                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

                                        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

                                        docker buildx create --append --name "$name" --use
                                        docker buildx build --platform "$platform" -t "$image:$tag" -t "$image:latest" --push .
                                        docker buildx imagetools inspect "$image:latest"
                                    privileged: true
                                    envVariables:
                                        DOCKER_PASSWORD: <+secrets.getValue("mansongdockerhub")>
                                        DOCKER_USERNAME: mansong
                                    resources:
                                        limits:
                                            memory: 1Gi
                                            cpu: "1.0"
                  serviceDependencies:
                      - identifier: DIND
                        name: DIND
                        type: Service
                        spec:
                            connectorRef: mansongdockerhub
                            image: docker:dind
                            privileged: true
                  sharedPaths:
                      - /var/run
                      - /var/lib/docker
              variables:
                  - name: golangImage
                    type: String
                    value: golang:1.16.6-alpine3.14
    flowControl:
        barriers: []
